@page "/"

<PageTitle>Index</PageTitle>

<ToolBar UploadImage="@UploadImage" 
    CreatePalette="@CreatePalette" />
    
<button onclick="@AddColorPane"></button>

@* @if (ImgSrc != null)
{
    <img src="@ImgSrc" />
} *@

<div class="container-fluid vh-100">
    <div class="row">
        @foreach (var (id, color) in Colors)
        {
            <ColorPane PaneId=@id Color=@color RGBColor=@HexToRGB(color)
                UpdateColorPane="@UpdateColorPane"
                RemoveColorFromList="@RemoveColorFromList" />
        }
    </div>
</div>

@code {
    private static int NumPanes = 5;

    private Dictionary<string, string> Colors = Enumerable
        .Repeat("#FFFFFF", NumPanes)
        .ToDictionary(_ => RandomId(), color => color);

    private string? ImgSrc;
    
    private string Format = "RGB";

    private int NumClusters = 8;

    private byte[]? ByteData;

    // creates a random id for each pane
    private static string RandomId()
    {
        return Guid.NewGuid().ToString("N");
    }

    // supply initial RGB values to color pane
    private RGB HexToRGB(string color)
    {
        return new RGB(color);
    }

    // handle file input
    // input types are limited to img only
    // convert file to bmp and then into a byte array for processing
    private async void UploadImage(InputFileChangeEventArgs e)
    {
        int bmpHeaderSize = 54;
        int maxWidth = 640;
        int maxFileSize = 3200000;
        
        var bmpFile = await e.File
            .RequestImageFileAsync("image/bmp", maxWidth, maxWidth);

        using var input = bmpFile.OpenReadStream(maxFileSize);
        using var ms = new MemoryStream();
        await input.CopyToAsync(ms);

        ByteData = ms.ToArray()
            .Skip(bmpHeaderSize)
            .ToArray();

        ImgSrc = ($"data:{e.File.ContentType};base64," + 
            $"{Convert.ToBase64String(ms.ToArray())}");
    }

    // create palette using k-means clustering
    private void CreatePalette()
    {
        if (ByteData == null)
            return;

        // set number of colors for the palette`
        KMeans.K = NumClusters;

        RGB[] RGBData = new RGB[ByteData.Length / 3];

        for (int i = 2; i < ByteData.Length; i += 3)
            RGBData[(i - 2) / 3] = new RGB(ByteData[i],
                ByteData[i - 1], ByteData[i - 2]);

        Colors = KMeans.Cluster<RGB>(RGBData)
            .ToDictionary(_ => RandomId(), color => color);
        NumPanes = Colors.Count;
    }

    // pass down methods to child color pane components
    // to update the list of colors
    public void UpdateColorPane(string id, string color)
    {
        Colors[id] = color;
    }

    // once pane has been hidden, reload
    public void RemoveColorFromList(string id)
    {
        NumPanes--;
        StateHasChanged();
    }

    public void AddColorPane()
    {
        if (NumPanes < 8)
        {
            Colors[RandomId()] = "#FFFFFF";
            NumPanes++;
            StateHasChanged();
        }
    }
}