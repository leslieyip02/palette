@page "/"

<PageTitle>Index</PageTitle>

@* <ColorPane /> *@

<InputFile OnChange="@CreatePalette" />

@if (ImgSrc == null)
{
    <p><em>Loading image...</em></p>
}
else
{
    <img src="@ImgSrc" />
}

@if (Colors == null)
{
    <p><em>Loading colors...</em></p>
}
else
{
    @foreach (string color in Colors)
    {
        <ColorPane Color=@color RGBColor=@HexToRGB(color)
            RemoveColorPane="@RemoveColorPane" />
    }
}

<label for="colorFormat">Choose a Format:</label>
<select @bind="@Format">
    <option value="RGB" selected>RGB</option>
    <option value="CMYK">CMYK</option>
    <option value="HSL">HSL</option>
    <option value="HSV">HSV</option>
</select>

@code {
    private List<string>? Colors;

    private string? ImgSrc;
    
    private string Format = "RGB";

    private int NumClusters = 8;

    private RGB HexToRGB(string color)
    {
        byte r = Convert.ToByte(color.Substring(1, 2), 16);
        byte g = Convert.ToByte(color.Substring(3, 2), 16);
        byte b = Convert.ToByte(color.Substring(5, 2), 16);

        return new RGB(r, g, b);
    }

    private async Task CreatePalette(InputFileChangeEventArgs e)
    {
        int bmpHeaderSize = 54;
        int maxWidth = 640;
        int maxFileSize = 3200000;
        
        var bmpFile = await e.File
            .RequestImageFileAsync("image/bmp", maxWidth, maxWidth);

        using var input = bmpFile.OpenReadStream(maxFileSize);
        using var ms = new MemoryStream();
        await input.CopyToAsync(ms);

        byte[] byteData = ms.ToArray()
            .Skip(bmpHeaderSize)
            .ToArray();

        RGB[] RGBData = new RGB[byteData.Length / 3];

        for (int i = 2; i < byteData.Length; i += 3)
            RGBData[(i - 2) / 3] = new RGB(byteData[i],
                byteData[i - 1], byteData[i - 2]);

        ImgSrc = ($"data:{e.File.ContentType};base64,{Convert.ToBase64String(ms.ToArray())}");
        Console.WriteLine(e.File.ContentType);
        Console.WriteLine(e.File.Size);

        Colors = KMeans.Cluster<RGB>(RGBData)
            .ToList();
    }

    public void RemoveColorPane(string color)
    {
        Colors?.Remove(color);
        StateHasChanged();
    }
}