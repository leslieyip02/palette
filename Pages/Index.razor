@page "/"

<PageTitle>Index</PageTitle>

<InputFile accept="image/*" OnChange="@CreatePalette" />

<div>
    <ToolBar />

    @if (ImgSrc != null)
    {
        <img src="@ImgSrc" />
    }

    @if (Colors == null)
    {
        @* <p><em>Loading colors...</em></p> *@
        @for (int i = 0; i < 5; i++)
        {
            int j = i;
            <ColorPane Id=@j UpdateColorPane="@UpdateColorPane"
                RemoveColorPane="@RemoveColorPane" />
        }
    }
    else
    {
        @for (int i = 0; i < Colors.Count; i++)
        {
            int j = i;
            <ColorPane Id=@j Color=@Colors[j] RGBColor=@HexToRGB(Colors[j])
                UpdateColorPane="@UpdateColorPane"
                RemoveColorPane="@RemoveColorPane" />
        }
    }

    @* <label for="colorFormat">Choose a Format:</label>
    <select @bind="@Format">
        <option value="RGB" selected>RGB</option>
        <option value="CMYK">CMYK</option>
        <option value="HSL">HSL</option>
        <option value="HSV">HSV</option>
    </select> *@
</div>


@code {
    private List<string> Colors = Enumerable
        .Repeat("#FFFFFF", 5)
        .ToList();

    private string? ImgSrc;
    
    private string Format = "RGB";

    private int NumClusters = 8;

    private RGB HexToRGB(string color)
    {
        byte r = Convert.ToByte(color.Substring(1, 2), 16);
        byte g = Convert.ToByte(color.Substring(3, 2), 16);
        byte b = Convert.ToByte(color.Substring(5, 2), 16);

        return new RGB(r, g, b);
    }

    private async Task CreatePalette(InputFileChangeEventArgs e)
    {
        int bmpHeaderSize = 54;
        int maxWidth = 640;
        int maxFileSize = 3200000;
        
        var bmpFile = await e.File
            .RequestImageFileAsync("image/bmp", maxWidth, maxWidth);

        using var input = bmpFile.OpenReadStream(maxFileSize);
        using var ms = new MemoryStream();
        await input.CopyToAsync(ms);

        byte[] byteData = ms.ToArray()
            .Skip(bmpHeaderSize)
            .ToArray();

        RGB[] RGBData = new RGB[byteData.Length / 3];

        for (int i = 2; i < byteData.Length; i += 3)
            RGBData[(i - 2) / 3] = new RGB(byteData[i],
                byteData[i - 1], byteData[i - 2]);

        ImgSrc = ($"data:{e.File.ContentType};base64,{Convert.ToBase64String(ms.ToArray())}");
        Console.WriteLine(e.File.ContentType);
        Console.WriteLine(e.File.Size);

        Colors = KMeans.Cluster<RGB>(RGBData)
            .ToList();
    }

    public void UpdateColorPane(int id, string color)
    {
        Colors[id] = color;
    }

    public void RemoveColorPane(int id)
    {
        Colors?.RemoveAt(id);
        StateHasChanged();
    }
}