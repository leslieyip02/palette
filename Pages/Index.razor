@page "/"

<PageTitle>Index</PageTitle>

<ToolBar UploadImage="@UploadImage" 
    CreatePalette="@CreatePalette" />
    
<button onclick="@AddColorPane"></button>

@* @if (imgSrc != null)
{
    <img src="@imgSrc" />
} *@

<div class="container-fluid vh-100">
    <div class="row">
        @foreach (var (id, color) in colors)
        {
            <ColorPane PaneId=@id Color=@color RGBColor=@HexToRGB(color)
                UpdateColorPane="@UpdateColorPane"
                RemoveColorFromList="@RemoveColorFromList" />
        }
    </div>
</div>

@code {
    private static int numPanes = 5;

    private Dictionary<string, string> colors = Enumerable
        .Repeat("#FFFFFF", numPanes)
        .ToDictionary(_ => RandomId(), color => color);

    private string? imgSrc;

    private byte[]? byteData;

    // creates a random id for each pane
    private static string RandomId()
    {
        return Guid.NewGuid().ToString("N");
    }

    // supply initial RGB values to color pane
    private RGB HexToRGB(string color)
    {
        return new RGB(color);
    }

    // handle file input
    // input types are limited to img only
    // convert file to bmp and then into a byte array for processing
    private async void UploadImage(InputFileChangeEventArgs e)
    {
        int bmpHeaderSize = 54;
        int maxWidth = 640;
        int maxFileSize = 3200000;
        
        var bmpFile = await e.File
            .RequestImageFileAsync("image/bmp", maxWidth, maxWidth);

        using var input = bmpFile.OpenReadStream(maxFileSize);
        using var ms = new MemoryStream();
        await input.CopyToAsync(ms);

        byteData = ms.ToArray()
            .Skip(bmpHeaderSize)
            .ToArray();

        imgSrc = ($"data:{e.File.ContentType};base64," + 
            $"{Convert.ToBase64String(ms.ToArray())}");
    }

    // create palette using k-means clustering
    private void CreatePalette()
    {
        // sample 1 color per 10 pixels
        // 1 color is 3 bytes
        int samplingRate = 3 * 10;

        if (byteData == null)
            return;

        int sampleSize = byteData.Length / samplingRate;

        RGB[] RGBData = new RGB[sampleSize];

        for (int i = 0; i < sampleSize; i++)
            RGBData[i] = new RGB(byteData[i * samplingRate + 2],
                byteData[i * samplingRate + 1], byteData[i * samplingRate]);

        colors.Clear();
        colors = KMeans.Cluster<RGB>(RGBData)
            .ToDictionary(_ => RandomId(), color => color);
        numPanes = colors.Count;
    }

    // pass down methods to child color pane components
    // to update the list of colors
    public void UpdateColorPane(string id, string color)
    {
        colors[id] = color;
    }

    // once pane has been hidden, reload
    public void RemoveColorFromList(string id)
    {
        numPanes--;
        StateHasChanged();
    }

    public void AddColorPane()
    {
        if (numPanes < 8)
        {
            colors[RandomId()] = "#FFFFFF";
            numPanes++;
            StateHasChanged();
        }
    }
}