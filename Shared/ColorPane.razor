@inject IJSRuntime JSRuntime

<div class="vh-100 d-flex justify-content-center resizable @_display" 
    style="flex: @_flex; background-color: @Color;">

    @if (_flex != "0")
    {
        <div class="position-absolute bottom-0 d-flex flex-column m-auto p-3">
            <input type="text" class="color-text-input dynamic-color" 
                maxlength="7" style="color: @TextColor();" 
                value="@Color" @onchange="@OnInputTextChange" />

            @for (int i = 0; i < 3; i++)
            {
                int j = i;
                char component = "RGB"[j];
                string htmlId = $"pane-{PaneId}-{component}";
                string accentColor = "#000000";

                accentColor = accentColor
                    .Remove(j * 2 + 1, 2)
                    .Insert(j * 2 + 1, Convert
                        .ToInt32(RGBColor.Values[j])
                        .ToString("X")
                        .PadLeft(2, '0'));

                <div class="d-flex justify-content-center align-items-center">
                    <label for="@htmlId" class="align-middle p-1 dynamic-color"
                        style="color: @TextColor();">@component</label>
                    <input id="@htmlId" type="range" min="0" max="255"
                        class="color-slider-input" value="@RGBColor.Values[j]" 
                        @oninput="@(e => OnSliderChange(e, j))" 
                        title="@RGBColor.Values[j]"/>
                </div>
            }

            <div class="justify-content-center m-auto p-1 dynamic-color">
                <button type="button" class="btn" style="color: @TextColor();"
                    onclick="@CopyToClipboard" title="Copy to clipboard">
                    <i type="button" class="fa fa-copy"></i>
                </button>

                <button type="button" class="btn" style="color: @TextColor();"
                    onclick="@RemoveColorPane" title="Remove color">
                    <i type="button" class="fa fa-trash"></i>
                </button>
            </div>
        </div>
    }
</div>


@code {
    [Parameter]
    public string PaneId { get; set; } = "";

    [Parameter] 
    public string Color { get; set; } = "#FFFFFF";

    [Parameter] 
    public RGB RGBColor { get; set; } = new RGB(255, 255, 255);

    [Parameter]
    public Action<string, string> UpdateColorPane { get; set; }
    
    [Parameter]
    public Action<string> RemoveColorFromList { get; set; }

    // controls animation of removing a panne
    private string _flex = "1";
    private string _display = "d-block";

    // update div background color based on new RGB values
    // update list of colors in parent component
    private void UpdateColor()
    {
        Color = RGBColor.ToString();
        UpdateColorPane?.Invoke(PaneId, Color);
    }

    // validate input color before changing
    private void OnInputTextChange(ChangeEventArgs e)
    {
        if (e.Value == null)
            return;

        string color = e.Value.ToString();
        if (!color.StartsWith('#'))
            color = '#' + color;
        
        Regex hexFormat = new Regex(@"^#[A-Fa-f0-9]{6}$");
        if (hexFormat.IsMatch(color))
        {
            RGBColor = new RGB(color);
            UpdateColor();
        }
    }

    // update RGB components based on range slider values
    private void OnSliderChange(ChangeEventArgs e, int i)
    {
        RGBColor.Values[i] = Convert.ToDouble(e.Value);
        UpdateColor();
    }

    private async Task CopyToClipboard()
    {
        await JSRuntime
            .InvokeVoidAsync("navigator.clipboard.writeText", Color);
    }

    // reduce the size of the pane using flex
    // and then hide the display by setting the display to none
    private async void RemoveColorPane()
    {
        _flex = "0";
        await Task.Delay(500);

        _display = "d-none";
        RemoveColorFromList?.Invoke(PaneId);
    }

    // use white text if the brightness is too low
    private string TextColor()
    {
        int valueSum = (int) RGBColor.Values.Sum();
        return valueSum > (255 * 3 / 2) ? "#000000" : "#FFFFFF";
    }
}